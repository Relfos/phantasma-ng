using System.Numerics;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Phantasma.Business.Blockchain;
using Phantasma.Business.VM.Utils;
using Phantasma.Core.Cryptography;
using Phantasma.Core.Domain;
using Phantasma.Core.Types;
using Phantasma.Simulator;

namespace Phantasma.LegacyTests.Exploits;

[TestClass, TestCategory("Security")]
public class WhenSystemAddressUsedAsSourceInScript
{
    string sysAddress;
    PhantasmaKeys user;
    PhantasmaKeys owner;
    Nexus nexus;
    NexusSimulator simulator;
    int amountRequested;
    int gas;
    int initialAmount;
    int initialFuel;
    BigInteger startBalance;
    StakeReward reward;


    [TestInitialize]
    public void Initialize()
    {
        sysAddress = "S3d79FvexQeerRioAY3pGYpNPFx7oJkMV4KazdTHdGDA5iy";
        user = PhantasmaKeys.Generate();
        owner = PhantasmaKeys.Generate();
        amountRequested = 100000000;
        gas = 9999;
        initialAmount = 1000000;
        initialFuel = 1000000;
        reward = new StakeReward(user.Address, Timestamp.Now);
        InitializeSimulator();

        startBalance = nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, DomainSettings.StakingTokenSymbol, user.Address);
    }

    protected void InitializeSimulator()
    {
        simulator = new NexusSimulator(owner);
        nexus = simulator.Nexus;
        nexus.SetOracleReader(new OracleSimulator(nexus));
        SetInitialBalance(user.Address);
    }

    protected void SetInitialBalance(Address address)
    {
        simulator.BeginBlock();
        simulator.GenerateTransfer(owner, address, nexus.RootChain, DomainSettings.FuelTokenSymbol, initialFuel);
        simulator.GenerateTransfer(owner, address, nexus.RootChain, DomainSettings.StakingTokenSymbol, initialAmount);
        simulator.EndBlock();
        Assert.IsTrue(simulator.LastBlockWasSuccessful());
    }

    [TestMethod("Mint Token Should Not Mint Token.")]
    public void MintTokenShouldNotMintToken()
    {
        var balanceBefore = nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, DomainSettings.RewardTokenSymbol, user.Address);
        
        simulator.BeginBlock();
        simulator.GenerateCustomTransaction(user, ProofOfWork.Minimal, () =>
            ScriptUtils.BeginScript().AllowGas(user.Address, Address.Null, 1, gas)
                .CallInterop("Runtime.MintToken", sysAddress, user.Address, DomainSettings.RewardTokenSymbol, VMObject.FromStruct(reward), new byte[0], 0).
                SpendGas(user.Address).EndScript());
        simulator.EndBlock();
        Assert.IsFalse(simulator.LastBlockWasSuccessful());

        //Assertions if exception is not used in this circumstance
        var balanceAfter = nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, DomainSettings.RewardTokenSymbol, user.Address);
        Assert.AreNotEqual(balanceAfter - balanceBefore, 1, "A token was generated.");
        Assert.AreEqual(balanceBefore, balanceAfter, "Tokens were generated or lost.");
    }

    [TestMethod("Mint Tokens Should Not Mint Tokens.")]
    public void MintTokensShouldNotMintTokens()
    {
        simulator.BeginBlock();
        simulator.GenerateCustomTransaction(user, ProofOfWork.Minimal, () =>
            ScriptUtils.BeginScript().AllowGas(user.Address, Address.Null, 1, gas)
                .CallInterop("Runtime.MintTokens", sysAddress, user.Address, DomainSettings.StakingTokenSymbol, amountRequested).
                SpendGas(user.Address).EndScript());
        Assert.IsFalse(simulator.LastBlockWasSuccessful());

        var endBalance = nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, DomainSettings.StakingTokenSymbol, user.Address);
        Assert.AreNotEqual(startBalance + amountRequested, endBalance, "Requested tokens were minted");
        Assert.AreEqual(startBalance, endBalance, "Unexpected number of tokens were minted");
    }

    [TestMethod("Transfer Tokens Should Not Transfer Tokens")]
    public void TransferTokensShouldNotTransferTokens()
    {
        // This system address is a valid witness
        sysAddress = "S3dGQ4o4tABpRkVugPyCUeAE4oXinNbxF6C1gfkhXQNDDTU";
        simulator.BeginBlock();
        simulator.GenerateCustomTransaction(user, ProofOfWork.Minimal, () =>
            ScriptUtils.BeginScript().AllowGas(user.Address, Address.Null, 1, gas)
                .CallInterop("Runtime.MintTokens", owner.Address, sysAddress, DomainSettings.StakingTokenSymbol, amountRequested)
                .CallInterop("Runtime.TransferTokens", sysAddress, user.Address, DomainSettings.StakingTokenSymbol, amountRequested).
                SpendGas(user.Address).EndScript());
        Assert.IsFalse(simulator.LastBlockWasSuccessful());

        var endBalance = nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, DomainSettings.StakingTokenSymbol, user.Address);
        Assert.AreNotEqual(startBalance + amountRequested, endBalance, "Requested tokens were transfered");
        Assert.AreEqual(startBalance, endBalance, "Unexpected number of tokens were transferred");
    }
    
}
