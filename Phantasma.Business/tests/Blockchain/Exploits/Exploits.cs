using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Numerics;
using Phantasma.Business.Blockchain;
using Phantasma.Business.Blockchain.Contracts;
using Phantasma.Business.CodeGen.Assembler;
using Phantasma.Business.Tests.Simulator;
using Phantasma.Business.VM.Utils;
using Phantasma.Core.Cryptography;
using Phantasma.Core.Domain;
using Phantasma.Core.Numerics;
using Phantasma.Core.Types;

using Xunit;

namespace Phantasma.Business.Tests.Blockchain.Exploits;

[Collection(nameof(SystemTestCollectionDefinition))]
public class Exploits
{
    string sysAddress;
    PhantasmaKeys user;
    PhantasmaKeys user2;
    PhantasmaKeys user3;
    PhantasmaKeys owner;
    Nexus nexus;
    NexusSimulator simulator;
    int amountRequested;
    int gas;
    BigInteger initialAmount;
    BigInteger initialFuel;
    BigInteger startBalance;
    StakeReward reward;
    string fuelToken = DomainSettings.FuelTokenSymbol;
    string stakingToken = DomainSettings.StakingTokenSymbol;
    private string chainAddressStr;
    private string userAddressStr;
    private Address stakeAddress;
    private Address kcalAddress;
    
    private static string
    private static string STAKE_CONTRACT_ABI = "06096F6E557067726164650000000000010466726F6D08096F6E5769746E6573730093000000010466726F6D08096F6E4D69677261746500C0020000020466726F6D0802746F08066F6E4D696E7400F0020000040466726F6D0802746F080673796D626F6C0407746F6B656E494403046275726E0028030000020466726F6D0807746F6B656E494403066F6E4275726E0049030000040466726F6D0802746F080673796D626F6C0407746F6B656E49440300";

    private static string
    private static string EXPLOIT_CONTRACT_ABI = "060A496E697469616C697A650000000000010D636F6E74726163744F776E657208096F6E557067726164650073010000010466726F6D08096F6E4D696772617465005B020000020466726F6D0802746F08066F6E4D696E74008B020000040466726F6D0802746F080673796D626F6C0407746F6B656E494403046275726E00C3020000020466726F6D0807746F6B656E494403066F6E4275726E00E4020000040466726F6D0802746F080673796D626F6C0407746F6B656E49440300";

    private static string
    private static string EXPLOITV2_CONTRACT_ABI = "060A496E697469616C697A650000000000010D636F6E74726163744F776E657208096F6E5570677261646500A9010000010466726F6D08096F6E4D6967726174650091020000020466726F6D0802746F08066F6E4D696E7400C1020000040466726F6D0802746F080673796D626F6C0407746F6B656E494403046275726E00F9020000020466726F6D0807746F6B656E494403066F6E4275726E001A030000040466726F6D0802746F080673796D626F6C0407746F6B656E49440300";
    
    private static string EXPLOIT_SCRIPT =
        "040103010D000409416464726573732829070004010D03042F53336450326A6A66316A5547396E6574685A4257626E7539613664467142374B7665545755377A6E6973366A704479020302020104030402020403040D0404076D69677261746503040D0304057374616B652D03032E030B";
    
    private static string
    private static string
    
    private static string ACCOUNT_CONTRACT_PVM = "00040103010D000409416464726573732829070004010D03042F53336450326A6A66316A5547396E6574685A4257626E7539613664467142374B7665545755377A6E6973366A704479020302020104030402020403040D0404074D69677261746503040D0304057374616B652D03032E03000B00040103010D00040941646472657373282907000401040203020D000409416464726573732829070004020D04042F53336450326A6A66316A5547396E6574685A4257626E7539613664467142374B7665545755377A6E6973366A704479020403020105030502030503050D0504074D69677261746503050D0404057374616B652D04042E04000B00040103010D000409416464726573732829070004010201020D0302220000000000000000000000000000000000000000000000000000000000000000000003030D00040941646472657373282907000403190203040A0461010D0204056572726F720C02000D0404096765744E756D62657203040D03040573746F72652D03032E0304030203020D05040967657443616C6C656403050D04040573746F72652D04042E0404040204030D05040F52756E74696D652E436F6E746578740705040502050402010703070D0604084765745374616B6503060D0604057374616B652D06062E0604060206050203060A06F00108E903000205060D070301001B0607080A08E8030D0704096164644E756D62657203070D06040573746F72652D06062E060202060D070301021B0607090A095B020D07040F4D792070726576696F75732069732002040A23070A0B030B0D06040B52756E74696D652E4C6F670706000204060D0704076163636F756E74190607090A0929030D07042F53336450326A6A66316A5547396E6574685A4257626E7539613664467142374B7665545755377A6E6973366A7044790207060D0A0306005039278C04030A02010A030A0D070407556E7374616B6503070D0704057374616B652D07072E070D0A042F50324B466F6A58624A754A4C72377959484468414E457672784245636E67617A326E4A6E6F764B766B3543546D4667030A02060A030A0D0A04074D696772617465030A0D0704057374616B652D07072E07000204060D0704057374616B65190607090A09E7030202060D070301011D06070A0A0AE6030D07040973657443616C6C656403070D06040573746F72652D06062E060D07042F53336450326A6A66316A5547396E6574685A4257626E7539613664467142374B7665545755377A6E6973366A7044790207060D0B0306005039278C040D0C030102250B0C0D030D0D0B0404534F554C030B02010B030B02060B030B0D07041652756E74696D652E5472616E73666572546F6B656E730707000000000B";
    private static string ACCOUNT_CONTRACT_ABI = "03096F6E557067726164650000000000010466726F6D08096F6E4D6967726174650073000000020466726F6D0802746F08096F6E5769746E65737300FB000000010466726F6D0800";

    private static string
    private static string BOMB_CONTRACT_ABI = "060A496E697469616C697A650000000000010D636F6E74726163744F776E657208096F6E55706772616465001F010000010466726F6D08096F6E4D69677261746500A8010000020466726F6D0802746F08066F6E4D696E7400D8010000040466726F6D0802746F080673796D626F6C0407746F6B656E494403046275726E0010020000020466726F6D0807746F6B656E494403066F6E4275726E0031020000040466726F6D0802746F080673796D626F6C0407746F6B656E49440300";

    private static string SOUL_CONTRACT_PVM = "000D0104115068616E7461736D61205374616B696E670301081C00000B000D010404534F554C0301082C00000B000D010601010301083900000B000D010601010301084600000B000D010601010301085300000B000D010301080301086000000B000D010601000301086D00000B000D010301000301087A00000B000D010601010301088700000B000D010601000301089400000B000D010408446174612E4765740D020404736F756C0D0003010803000D0004065F6F776E6572030003020701040303030D00040941646472657373282907000403020301030108DF00000B000D00040F52756E74696D652E56657273696F6E070004000D010301001A0001000A003E010D00043243757272656E74206E657875732070726F746F636F6C2076657273696F6E2073686F756C642062652030206F72206D6F72650C0000040303030D000409416464726573732829070004030203040204010D040601000204020D0502220200AE0FACCCF0A3723ADEFBDFE700C097B6C843DBFD06E5CD325602EC13B2361F8B03050D000409416464726573732829070004050205040D0603060010A5D4E80003060D060404534F554C030602030603060D0602220200AE0FACCCF0A3723ADEFBDFE700C097B6C843DBFD06E5CD325602EC13B2361F8B03060D0004094164647265737328290700040603060D05041252756E74696D652E4D696E74546F6B656E730705000D030408446174612E53657403010D0004065F6F776E65720300070303020D0004085F6368616E676564030007030B00040103010D000409416464726573732829070004010D0302220200AE0FACCCF0A3723ADEFBDFE700C097B6C843DBFD06E5CD325602EC13B2361F8B03030D000409416464726573732829070004030203020D0403060010A5D4E80003040D0404044B43414C0304020104030402020403040D03041652756E74696D652E5472616E73666572546F6B656E73070308CD02000B00040103010D00040941646472657373282907000401040203020D0004094164647265737328290700040208FD02000B00040103010D00040941646472657373282907000401040203020D00040941646472657373282907000402040304040E040403083503000B00040103010D0004094164647265737328290700040104020E020203085603000B00040103010D00040941646472657373282907000401040203020D00040941646472657373282907000402040304040E040403088E03000B";
    private static string

    private static string INFINITE_CONTRACT_PVM = "000D00040F52756E74696D652E56657273696F6E070004000D010301001A0001000A005E000D00043243757272656E74206E657875732070726F746F636F6C2076657273696F6E2073686F756C642062652030206F72206D6F72650C0000040103010D00040941646472657373282907000401000B00000D010601010A01A8000D03040D696E66696E697465206C6F6F7003030D02040B52756E74696D652E4C6F67070208770000000B";
    private static string INFINITE_CONTRACT_ABI = "020A496E697469616C697A650000000000010D636F6E74726163744F776E6572080C74657374496E66696E69746500750000000000";
    
    public Exploits()
    {
        Initialize();
    }
    
    public void Initialize()
    {
        sysAddress = "S3d79FvexQeerRioAY3pGYpNPFx7oJkMV4KazdTHdGDA5iy";
                
        user = PhantasmaKeys.Generate();
        user2 = PhantasmaKeys.Generate();
        user3 = PhantasmaKeys.FromWIF("L23uui4wEq9P67gQXgqwc7EnLkby9wC2MwtdYmcvFEQ9frNkrSaA"); // P2KFojXbJuJLr7yYHDhANEvrxBEcngaz2nJnovKvk5CTmFg
        owner = PhantasmaKeys.Generate();
        amountRequested = 100000000;
        gas = 99999;
        initialAmount = UnitConversion.ToBigInteger(10, DomainSettings.StakingTokenDecimals);
        initialFuel = UnitConversion.ToBigInteger(10, DomainSettings.FuelTokenDecimals);
        
        InitializeSimulator();
        
        chainAddressStr = Base16.Encode(simulator.Nexus.RootChain.Address.ToByteArray());
        userAddressStr = Base16.Encode(user.Address.ToByteArray());                      
        stakeAddress = SmartContract.GetAddressForNative(NativeContractKind.Stake);     
        kcalAddress = SmartContract.GetAddressFromContractName("KCAL");         

        startBalance = nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, DomainSettings.StakingTokenSymbol, user.Address);
    }

    protected void InitializeSimulator()
    {
        simulator = new NexusSimulator(owner);
        nexus = simulator.Nexus;
        nexus.SetOracleReader(new OracleSimulator(nexus));
        
        simulator.GetFundsInTheFuture(owner);
        simulator.GetFundsInTheFuture(owner);
        simulator.GetFundsInTheFuture(owner);
        simulator.GetFundsInTheFuture(owner);
        simulator.GetFundsInTheFuture(owner);
        
        SetInitialBalance(user.Address);
        SetInitialBalance(user2.Address);
        SetInitialBalance(user3.Address);
    }

    protected void SetInitialBalance(Address address)
    {
        simulator.BeginBlock();
        simulator.GenerateTransfer(owner, address, nexus.RootChain, DomainSettings.FuelTokenSymbol, initialFuel);
        simulator.GenerateTransfer(owner, address, nexus.RootChain, DomainSettings.StakingTokenSymbol, initialAmount);
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());
    }
    
    [Fact]
    public void DuplicateTransferTest()
    {
        var target = PhantasmaKeys.Generate();

        simulator.BeginBlock();
        var tx1 = simulator.GenerateTransfer(owner, target.Address, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, 1);
        var tx2 = simulator.GenerateTransfer(owner, target.Address, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, 1);

        Assert.True(tx1.Hash == tx2.Hash);

        simulator.EndBlock();
        Assert.False(simulator.LastBlockWasSuccessful());
    }

    [Fact]
    public void ChainTransferExploit()
    {
        var symbol = DomainSettings.StakingTokenSymbol;

        var chainAddressStr = Base16.Encode(simulator.Nexus.RootChain.Address.ToByteArray());
        var userAddressStr = Base16.Encode(user.Address.ToByteArray());

        simulator.BeginBlock();
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, 100000000000);
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, 10000000000);
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());

        var chainAddress = simulator.Nexus.RootChain.Address;
        simulator.BeginBlock();
        var tx = simulator.GenerateTransfer(owner, chainAddress, simulator.Nexus.RootChain, symbol, 100000000);
        var block = simulator.EndBlock().FirstOrDefault();
        Assert.True(simulator.LastBlockWasSuccessful());

        var evts = block.GetEventsForTransaction(tx.Hash);
        Assert.True(evts.Any(x => x.Kind == EventKind.TokenReceive && x.Address == chainAddress));

        var token = simulator.Nexus.GetTokenInfo(simulator.Nexus.RootStorage, symbol);

        var initialBalance = simulator.Nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, token, chainAddress);
        Assert.True(initialBalance > 10000);

        string[] scriptString = new string[]
        {
                $"alias r5, $sourceAddress",
                $"alias r6, $targetAddress",
                $"alias r7, $amount",
                $"alias r8, $symbol",

                $"load $amount, 10000",
                $@"load $symbol, ""{symbol}""",

                $"load r11 0x{chainAddressStr}",
                $"push r11",
                $@"extcall ""Address()""",
                $"pop $sourceAddress",

                $"load r11 0x{userAddressStr}",
                $"push r11",
                $@"extcall ""Address()""",
                $"pop $targetAddress",

                $"push $amount",
                $"push $symbol",
                $"push $targetAddress",
                $"push $sourceAddress",
                "extcall \"Runtime.TransferTokens\"",
        };

        var script = AssemblerUtils.BuildScript(scriptString);

        simulator.BeginBlock();
        simulator.GenerateCustomTransaction(user, ProofOfWork.None, () =>
            ScriptUtils.BeginScript().
                AllowGas(user.Address, Address.Null, simulator.MinimumFee, Transaction.DefaultGasLimit).
                EmitRaw(script).
                SpendGas(user.Address).
                EndScript());

        simulator.EndBlock();
        Assert.False(simulator.LastBlockWasSuccessful());

        var finalBalance = simulator.Nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, token, simulator.Nexus.RootChain.Address);
        Assert.True(initialBalance == finalBalance);
    }

    [Fact]
    public void TestPrintMoneyWithoutPermission()
    {
        //Let A be an address
        var addressToExploit = Address.FromText("S3dP2jjf1jUG9nethZBWbnu9a6dFqB7KveTWU7znis6jpDy");

        simulator.BeginBlock();
        simulator.GenerateTransfer(owner, user.Address, nexus.RootChain, fuelToken, 10000000000000);
        simulator.GenerateTransfer(owner, user.Address, nexus.RootChain, stakingToken, 100000000);
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());

        var balanceBefore = nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, stakingToken, user.Address);

        // Should Fail
        MintTokens(user, user.Address, addressToExploit, user.Address, stakingToken, 100000000, true);
        
        // Should Fail
        MintTokens(user, user.Address, SmartContract.GetAddressForNative(NativeContractKind.Stake), user.Address, stakingToken, 100000000, true);

        var balanceAfter = nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, stakingToken, user.Address);
        Assert.True(balanceAfter == balanceBefore, $"{balanceAfter} == {balanceBefore}");
        Assert.False(balanceAfter == balanceBefore + 100000000);
    }
    
    [Fact]
    public void TestPrintMoneyWithoutPermissionStakeContract()
    {
        simulator.BeginBlock();
        simulator.GenerateTransfer(owner, user.Address, nexus.RootChain, fuelToken, 10000000000);
        simulator.GenerateTransfer(owner, user.Address, nexus.RootChain, stakingToken, 100000000);
        simulator.GenerateTransfer(owner, stakeAddress, nexus.RootChain, fuelToken, 10000000000);
        simulator.GenerateTransfer(owner, stakeAddress, nexus.RootChain, stakingToken, 10000000000);
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());

        var balanceBefore = nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, stakingToken, user.Address);
        
        // Should Fail
        MintTokens(user, stakeAddress, stakeAddress, user.Address, stakingToken, 100000000, true);
        
        // Should Fail
        MintTokens(user, user.Address, stakeAddress, user.Address, stakingToken, 100000000, true);

        var balanceAfter = nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, stakingToken, user.Address);
        Assert.True(balanceAfter == balanceBefore, $"{balanceAfter} == {balanceBefore}");
        Assert.False(balanceAfter == balanceBefore + 1000000000);
    }


    public struct crownStruct
    {
        public Address staker;
        public Timestamp date;
    }

    [Fact]
    public void TestPrintCrowns()
    {
        //Let A be an address
        var crownRom = new crownStruct
        {
            staker = user.Address,
            date = Timestamp.Now
        };

        var crownRam = 1;

        simulator.BeginBlock();
        simulator.GenerateTransfer(owner, user.Address, nexus.RootChain, fuelToken, 10000000000);
        simulator.GenerateTransfer(owner, user.Address, nexus.RootChain, stakingToken, 100000000);
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());

        var reward = new StakeReward(user.Address, Timestamp.Now);

        var balanceBefore = nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, "CROWN", user.Address);

        Address exploitAddress = Address.FromText("S3d79FvexQeerRioAY3pGYpNPFx7oJkMV4KazdTHdGDA5iy");

        // Should fail
        MintToken(user, user.Address, exploitAddress, user.Address, DomainSettings.RewardTokenSymbol, reward, new byte[0], true);

        var balanceAfter = nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, "CROWN", user.Address);
        Assert.True(balanceAfter == balanceBefore, $"{balanceAfter} != {balanceBefore}");
    }

    [Fact]
    public void TestInfiniteTokenTransfer()
    {
        simulator.BeginBlock();
        simulator.GenerateToken(owner, "INFI", "infinity token", 0, 8,
            TokenFlags.Fungible | TokenFlags.Transferable | TokenFlags.Divisible);
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());

        var infiToken = nexus.GetTokenInfo(nexus.RootStorage, "INFI");

        var infiAmount = 1000 * UnitConversion.GetUnitValue(infiToken.Decimals);

        simulator.BeginBlock();
        simulator.GenerateTransfer(owner, user.Address, nexus.RootChain, DomainSettings.FuelTokenSymbol, 100000000);
        simulator.MintTokens(owner, owner.Address, infiToken.Symbol, infiAmount);
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());

        var balance = nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, infiToken, owner.Address);
        Assert.True(balance == infiAmount);

        simulator.BeginBlock();
        simulator.GenerateTransfer(owner, user.Address, nexus.RootChain, infiToken.Symbol, infiAmount);
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());

        balance = nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, infiToken, user.Address);
        Assert.True(balance == infiAmount);
    }

    [Fact]
    public void ForFalsifyIsWitness()
    {
        var testName = "test_name";

        var symbol = DomainSettings.StakingTokenSymbol;
        var baseSoul = UnitConversion.ToBigInteger(100m, DomainSettings.StakingTokenDecimals);
        var baseKcal = UnitConversion.ToBigInteger(100m, DomainSettings.FuelTokenDecimals);
        
        simulator.BeginBlock();
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal*2);
        simulator.GenerateTransfer(owner, stakeAddress, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());
        
        // Stake
        StakeSoul(user, user.Address, user.Address, baseSoul/2);
        
        // Simuale imperssionation of the IsWitness function
        simulator.BeginBlock();
        simulator.GenerateCustomTransaction(user, ProofOfWork.None, () =>
            ScriptUtils.BeginScript()
                .AllowGas(stakeAddress, Address.Null, simulator.MinimumFee, simulator.MinimumGasLimit)
                .CallContract(NativeContractKind.Account, nameof(AccountContract.RegisterName), stakeAddress.Text, testName)
                //.CallInterop("Runtime.IsWitness", sysAddress, chainAddressStr, userAddressStr)
                .SpendGas(stakeAddress)
                .EndScript());
        simulator.EndBlock();
        Assert.False(simulator.LastBlockWasSuccessful());
        
        // Simuale imperssionation of the IsWitness function
        simulator.BeginBlock();
        simulator.GenerateCustomTransaction(user, ProofOfWork.None, () =>
            ScriptUtils.BeginScript()
                .AllowGas(owner.Address, Address.Null, simulator.MinimumFee, simulator.MinimumGasLimit)
                .CallContract(NativeContractKind.Account, nameof(AccountContract.RegisterName), owner.Address, testName)
                //.CallInterop("Runtime.IsWitness", sysAddress, chainAddressStr, userAddressStr)
                .SpendGas(owner.Address)
                .EndScript());
        simulator.EndBlock();
        Assert.False(simulator.LastBlockWasSuccessful());
        
        // Make a valid one just to check
        simulator.BeginBlock();
        simulator.GenerateCustomTransaction(user, ProofOfWork.None, () =>
            ScriptUtils.BeginScript()
                .AllowGas(user.Address, Address.Null, simulator.MinimumFee, simulator.MinimumGasLimit)
                .CallContract(NativeContractKind.Account, nameof(AccountContract.RegisterName), user.Address, testName)
                //.CallInterop("Runtime.IsWitness", sysAddress, chainAddressStr, userAddressStr)
                .SpendGas(user.Address)
                .EndScript());
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());
    }

    [Fact]
    public void ForClaimUserForMe()
    {
        var symbol = DomainSettings.StakingTokenSymbol;
        var baseSoul = UnitConversion.ToBigInteger(100m, DomainSettings.StakingTokenDecimals);
        var baseKcal = UnitConversion.ToBigInteger(100m, DomainSettings.FuelTokenDecimals);

        // Init tokens
        simulator.BeginBlock();
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, stakeAddress, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.GenerateTransfer(owner, stakeAddress, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul*2);
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());
        
        // Stake for testing
        StakeSoul(user, user.Address, user.Address, baseSoul/2);
        
        // Simuale imperssionation of the IsWitness function
        var tokensBefore = simulator.Nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage,  DomainSettings.FuelTokenSymbol, user.Address);

        // Try claim from me, to stake
        Claim(user, stakeAddress, user.Address, stakeAddress, true);
        
        simulator.BeginBlock();
        var tx = simulator.GenerateCustomTransaction(user, ProofOfWork.None, () =>
            ScriptUtils.BeginScript()
                .AllowGas(owner.Address, Address.Null, simulator.MinimumFee, simulator.MinimumGasLimit)
                .CallContract(NativeContractKind.Stake, nameof(StakeContract.Claim), user.Address, owner.Address)
                .CallContract(NativeContractKind.Stake, nameof(StakeContract.Claim), user.Address, owner.Address)
                .SpendGas(owner.Address)
                .EndScript());
        simulator.EndBlock();
        Assert.False(simulator.LastBlockWasSuccessful());
        
        var tokensAfter = simulator.Nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, DomainSettings.FuelTokenSymbol, user.Address);
        var txCost = simulator.Nexus.RootChain.GetTransactionFee(tx);

        Assert.Equal(tokensBefore, tokensAfter);

        simulator.TimeSkipDays(1, true);
        simulator.TimeSkipDays(1);
        
        // Make a valid one just to check
        var unclaimed =
            simulator.InvokeContract(NativeContractKind.Stake, nameof(StakeContract.GetUnclaimed), user.Address).AsNumber();

        // Sould claim 
        txCost = Claim(user, user.Address, user.Address, user.Address);
        
        BigInteger stakedAmount =
            simulator.Nexus.RootChain.InvokeContractAtTimestamp(simulator.Nexus.RootStorage, simulator.CurrentTime, NativeContractKind.Stake, nameof(StakeContract.GetStake), user.Address).AsNumber();
        Assert.Equal(stakedAmount, baseSoul/2);

        var tokensAfterValid = simulator.Nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, DomainSettings.FuelTokenSymbol, user.Address);
        
        Assert.NotEqual(tokensAfter, tokensAfterValid);
        Assert.Equal(tokensAfter, tokensAfterValid-unclaimed+txCost);
    }

    [Fact]
    public void MigrateStakeToMyAddress()
    {
        var symbol = DomainSettings.StakingTokenSymbol;
        var baseSoul = UnitConversion.ToBigInteger(100m, DomainSettings.StakingTokenDecimals);
        var baseKcal = UnitConversion.ToBigInteger(100m, DomainSettings.FuelTokenDecimals);
        
        // Init tokens
        simulator.BeginBlock();
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, stakeAddress, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.GenerateTransfer(owner, stakeAddress, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul*2);
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());
        
        // Stake for testing
        StakeSoul(user, user.Address, user.Address, baseSoul/2);

        
        var tokensBefore = simulator.Nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage,  DomainSettings.FuelTokenSymbol, user.Address);
        var unclaimedBefore = simulator.InvokeContract(NativeContractKind.Stake, nameof(StakeContract.GetUnclaimed), user.Address).AsNumber();

        // Simuale imperssionation of the IsWitness function to migrate
        simulator.BeginBlock();
        var tx = simulator.GenerateCustomTransaction(user, ProofOfWork.None, () =>
            ScriptUtils.BeginScript()
                .AllowGas(owner.Address, Address.Null, simulator.MinimumFee, simulator.MinimumGasLimit)
                .CallContract(NativeContractKind.Account, nameof(AccountContract.Migrate), owner.Address, user.Address)
                .CallContract(NativeContractKind.Account, nameof(AccountContract.Migrate), owner.Address, user.Address)
                .SpendGas(owner.Address)
                .EndScript());
        simulator.EndBlock();
        Assert.False(simulator.LastBlockWasSuccessful());

        var tokensAfter = simulator.Nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, DomainSettings.FuelTokenSymbol, user.Address);
        var txCost = simulator.Nexus.RootChain.GetTransactionFee(tx);
        BigInteger stakedAmount =
            simulator.Nexus.RootChain.InvokeContractAtTimestamp(simulator.Nexus.RootStorage, simulator.CurrentTime, NativeContractKind.Stake, nameof(StakeContract.GetStake), user.Address).AsNumber();
        Assert.Equal(stakedAmount, baseSoul/2);
        Assert.Equal(tokensBefore, tokensAfter);
        
        // Migrate Fail
        //MigrateStakeToMyAddress;
        simulator.BeginBlock();
        tx = simulator.GenerateCustomTransaction(user, ProofOfWork.None, () =>
            ScriptUtils.BeginScript()
                .AllowGas(user.Address, Address.Null, simulator.MinimumFee, simulator.MinimumGasLimit)
                .CallContract(NativeContractKind.Account, nameof(AccountContract.Migrate), owner.Address, user.Address)
                .SpendGas(user.Address)
                .EndScript());
        simulator.EndBlock();
        Assert.False(simulator.LastBlockWasSuccessful());
        
        // Make a valid one just to check
        var unclaimed = simulator.InvokeContract(NativeContractKind.Stake, nameof(StakeContract.GetUnclaimed), user.Address).AsNumber();
        Assert.Equal(unclaimedBefore, unclaimed);
        
        simulator.BeginBlock();
        tx = simulator.GenerateCustomTransaction(user, ProofOfWork.Minimal, () =>
            ScriptUtils.BeginScript()
                .AllowGas(user.Address, Address.Null, simulator.MinimumFee, simulator.MinimumGasLimit)
                .CallContract(NativeContractKind.Account, nameof(AccountContract.Migrate), stakeAddress, user.Address)
                .SpendGas(user.Address)
                .EndScript());
        simulator.EndBlock();
        Assert.False(simulator.LastBlockWasSuccessful());
        
        simulator.BeginBlock();
        tx = simulator.GenerateCustomTransaction(user, ProofOfWork.Minimal, () =>
            ScriptUtils.BeginScript()
                .AllowGas(stakeAddress, Address.Null, simulator.MinimumFee, simulator.MinimumGasLimit)
                .CallContract(NativeContractKind.Account, nameof(AccountContract.Migrate), stakeAddress, user.Address)
                .SpendGas(stakeAddress)
                .EndScript());
        simulator.EndBlock();
        Assert.False(simulator.LastBlockWasSuccessful());

        // Valid Migrate
        simulator.BeginBlock();
        tx = simulator.GenerateCustomTransaction(user, ProofOfWork.None, () =>
            ScriptUtils.BeginScript()
                .AllowGas(user.Address, Address.Null, simulator.MinimumFee, simulator.MinimumGasLimit)
                .CallContract(NativeContractKind.Account, nameof(AccountContract.Migrate), user.Address, user2.Address)
                .SpendGas(user.Address)
                .EndScript());
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());
        
        var unclaimedAfter = simulator.InvokeContract(NativeContractKind.Stake, nameof(StakeContract.GetUnclaimed), user.Address).AsNumber();
        Assert.NotEqual(unclaimed, unclaimedAfter);
        Assert.Equal(0, unclaimedAfter);
    }

    [Fact]
    public void TestKCALDeletion()
    {
        var symbol = DomainSettings.StakingTokenSymbol;
        var baseSoul = UnitConversion.ToBigInteger(60000m, DomainSettings.StakingTokenDecimals);
        var baseKcal = UnitConversion.ToBigInteger(1000m, DomainSettings.FuelTokenDecimals);
        
        // Init tokens
        simulator.BeginBlock();
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, stakeAddress, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.GenerateTransfer(owner, stakeAddress, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul*2);
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());
        
        // Stake 
        StakeSoul(user, user.Address, user.Address, UnitConversion.ToBigInteger(50000m, DomainSettings.StakingTokenDecimals));
        
        // Delete KCAL With Data.Delete
        simulator.BeginBlock();
        simulator.GenerateCustomTransaction(user, ProofOfWork.None, () =>
            ScriptUtils.BeginScript()
                .AllowGas(user.Address, Address.Null, simulator.MinimumFee, simulator.MinimumGasLimit)
                .CallInterop("Data.Delete", "KCAL")
                .SpendGas(user.Address)
                .EndScript());
        simulator.EndBlock();
        Assert.False(simulator.LastBlockWasSuccessful());
        
        // Try Delete KCAL By Killing the Contract
        simulator.BeginBlock();
        var tx = simulator.GenerateCustomTransaction(user, ProofOfWork.Minimal, () =>
            ScriptUtils.BeginScript()
                .AllowGas(user.Address, Address.Null, simulator.MinimumFee, simulator.MinimumGasLimit)
                .CallInterop("Runtime.KillContract", user.Address, "KCAL")
                .SpendGas(user.Address)
                .EndScript());
        simulator.EndBlock();
        Assert.False(simulator.LastBlockWasSuccessful());

        // Check 
        var ownerBalance = simulator.Nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, "KCAL", owner.Address);
        Assert.True(ownerBalance != 0);
        
        // Try to Clear KCAL
        simulator.BeginBlock();
        tx = simulator.GenerateCustomTransaction(owner, ProofOfWork.Minimal, () =>
            ScriptUtils.BeginScript()
                .AllowGas(owner.Address, Address.Null, simulator.MinimumFee, simulator.MinimumGasLimit)
                .CallInterop("List.Clear", "KCAL")
                .SpendGas(owner.Address)
                .EndScript());
        simulator.EndBlock();
        Assert.False(simulator.LastBlockWasSuccessful());
        
        simulator.BeginBlock();
        tx = simulator.GenerateCustomTransaction(owner, ProofOfWork.Minimal, () =>
            ScriptUtils.BeginScript()
                .AllowGas(owner.Address, Address.Null, simulator.MinimumFee, simulator.MinimumGasLimit)
                .CallInterop("List.Clear", "_balances")
                .SpendGas(owner.Address)
                .EndScript());
        simulator.EndBlock();
        Assert.False(simulator.LastBlockWasSuccessful());
        
        simulator.BeginBlock();
        tx = simulator.GenerateCustomTransaction(owner, ProofOfWork.Minimal, () =>
            ScriptUtils.BeginScript()
                .AllowGas(owner.Address, Address.Null, simulator.MinimumFee, simulator.MinimumGasLimit)
                .CallInterop("Map.Clear", "_balances")
                .SpendGas(owner.Address)
                .EndScript());
        simulator.EndBlock();
        Assert.False(simulator.LastBlockWasSuccessful());
        
        var kcalBalance = simulator.Nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, "KCAL", kcalAddress);

        simulator.BeginBlock();
        tx = simulator.GenerateCustomTransaction(user, ProofOfWork.Minimal, () =>
            ScriptUtils.BeginScript()
                .AllowGas(user.Address, Address.Null, simulator.MinimumFee, simulator.MinimumGasLimit)
                .CallInterop("Runtime.BurnTokens", kcalAddress, "KCAL", UnitConversion.ToBigInteger(100000000, DomainSettings.FuelTokenDecimals))
                .SpendGas(user.Address)
                .EndScript());
        simulator.EndBlock();
        Assert.False(simulator.LastBlockWasSuccessful());
        
        var kcalBalanceAfter = simulator.Nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, "KCAL", kcalAddress);
        Assert.Equal(kcalBalance, kcalBalanceAfter);

    }

    private static string
    private static string

    [Fact ()]
    public void TestOverrideKCALToken()
    {
        var symbol = DomainSettings.StakingTokenSymbol;
        var baseSoul = UnitConversion.ToBigInteger(60000m, DomainSettings.StakingTokenDecimals);
        var baseKcal = UnitConversion.ToBigInteger(20000, DomainSettings.FuelTokenDecimals);

        // Init tokens
        simulator.BeginBlock();
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, kcalAddress, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());
        
        // Stake for testing
        StakeSoul(user, user.Address, user.Address, UnitConversion.ToBigInteger(50000m, DomainSettings.StakingTokenDecimals));

        // Deploy Contract
        var KCALContractPVM = Base16.Decode(KCAL_CONTRACT_PVM);
        var KCALContractABI = Base16.Decode(KCAL_CONTRACT_ABI);
            
        var contractName = "KCAL";
        Address KCALAddress = SmartContract.GetAddressFromContractName(contractName);

        var kcalBalance = simulator.Nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, "KCAL", user.Address);
        
        simulator.BeginBlock();
        var tx = simulator.GenerateCustomTransaction(user, ProofOfWork.Minimal,
            () => ScriptUtils.BeginScript()
                .AllowGas(user.Address, Address.Null, simulator.MinimumFee, 1000000)
                .CallInterop("Nexus.CreateToken", user.Address, KCALContractPVM, KCALContractABI)
                .SpendGas(user.Address)
                .EndScript());
        simulator.EndBlock();
        Assert.False(simulator.LastBlockWasSuccessful(), "Deploying KCAL Contract Passed... ISSUE");
        
        var txCost = simulator.Nexus.RootChain.GetTransactionFee(tx);

        // Upgrade Contract and has transfer methods
        var txCost2 = UpgradeContract(user, user.Address, user.Address, "KCAL", KCAL_CONTRACT_PVM, KCAL_CONTRACT_ABI, true);
        
        var kcalBalanceAfter = simulator.Nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, "KCAL", user.Address);
        var kcalBalanceContract = simulator.Nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, "KCAL", kcalAddress);
        Assert.Equal(kcalBalance, kcalBalanceAfter);
        Assert.Equal(baseKcal, kcalBalanceContract);
    }
    
   
    [Fact]
    public void TestStealStakedFunds()
    {
        var symbol = DomainSettings.StakingTokenSymbol;
        var baseSoul = UnitConversion.ToBigInteger(60000m, DomainSettings.StakingTokenDecimals);
        var baseKcal = UnitConversion.ToBigInteger(10000, DomainSettings.FuelTokenDecimals);
        
        // Init tokens
        simulator.BeginBlock();
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, user2.Address, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, user2.Address, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.GenerateTransfer(owner, stakeAddress, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, stakeAddress, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());
        
        // Stake funds for users
        StakeSoul(user, user.Address, user.Address, UnitConversion.ToBigInteger(50000m, DomainSettings.StakingTokenDecimals));
        
        StakeSoul(user2, user2.Address, user2.Address, UnitConversion.ToBigInteger(50000m, DomainSettings.StakingTokenDecimals));

        var userBalanceSOULBefore = nexus.RootChain.GetTokenBalance(nexus.RootStorage, DomainSettings.StakingTokenSymbol,  user.Address );
        
        // Test Deploy Contract
        // Upgrade Stake Contract
        var txCost2 = DeployContract(user, user.Address, user.Address, "stake", STAKE_CONTRACT_PVM, STAKE_CONTRACT_ABI, true);

        var userBalanceSOULBAfter = nexus.RootChain.GetTokenBalance(nexus.RootStorage, DomainSettings.StakingTokenSymbol, user.Address);
        var userBalanceStakeContract = nexus.RootChain.GetTokenBalance(nexus.RootStorage, DomainSettings.StakingTokenSymbol, user.Address);
        
        //Assert.Equal(baseSoul + (UnitConversion.ToBigInteger(50000m, DomainSettings.StakingTokenDecimals)*2), userBalanceStakeContract);
        Assert.Equal(userBalanceSOULBefore, userBalanceSOULBAfter);
    }
    
    [Fact]
    public void TestStealStakedFundsMigrate()
    {
        var symbol = DomainSettings.StakingTokenSymbol;
        var baseSoul = UnitConversion.ToBigInteger(60000m, DomainSettings.StakingTokenDecimals);
        var baseKcal = UnitConversion.ToBigInteger(10000, DomainSettings.FuelTokenDecimals);

        // Init tokens
        simulator.BeginBlock();
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, user2.Address, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, user2.Address, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.GenerateTransfer(owner, stakeAddress, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, stakeAddress, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());
        
        // Stake funds for users
        StakeSoul(user, user.Address, user.Address, UnitConversion.ToBigInteger(50000m, DomainSettings.StakingTokenDecimals));
        
        StakeSoul(user2, user2.Address, user2.Address, UnitConversion.ToBigInteger(50000m, DomainSettings.StakingTokenDecimals));

        var userBalanceSOULBefore = nexus.RootChain.GetTokenBalance(nexus.RootStorage, DomainSettings.StakingTokenSymbol,  user.Address );
        
        // Test Deploy Contract
        var txCost = DeployContract(user, user.Address, user.Address, "account", ACCOUNT_CONTRACT_PVM, ACCOUNT_CONTRACT_ABI, true);
        
        // Upgrade Stake Contract
        var txCost2 = UpgradeContract(user, user.Address, user.Address, "stake", STAKE_CONTRACT_PVM, STAKE_CONTRACT_ABI, true);
        

        var userBalanceSOULBAfter = nexus.RootChain.GetTokenBalance(nexus.RootStorage, DomainSettings.StakingTokenSymbol, user.Address);
        var userBalanceStakeContract = nexus.RootChain.GetTokenBalance(nexus.RootStorage, DomainSettings.StakingTokenSymbol, user.Address);
        
        //Assert.Equal(baseSoul + (UnitConversion.ToBigInteger(50000m, DomainSettings.StakingTokenDecimals)*2), userBalanceStakeContract);
        Assert.Equal(userBalanceSOULBefore, userBalanceSOULBAfter);
    }

    [Fact]
    public void StealAllStakedSOUL()
    {
        var baseSoul = UnitConversion.ToBigInteger(60000m, DomainSettings.StakingTokenDecimals);
        var baseKcal = UnitConversion.ToBigInteger(10, DomainSettings.FuelTokenDecimals);

        // Init tokens
        simulator.BeginBlock();
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, stakeAddress, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, stakeAddress, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());
        
        // Stake for testing
        StakeSoul(user, user.Address, user.Address, UnitConversion.ToBigInteger(50000m, DomainSettings.StakingTokenDecimals));

        simulator.TimeSkipDays(31,true);
        
        var isMaster = simulator.Nexus.RootChain.InvokeContractAtTimestamp(simulator.Nexus.RootStorage, simulator.CurrentTime, NativeContractKind.Stake, nameof(StakeContract.IsMaster), user.Address).AsBool();
        Assert.True(isMaster == true);

        var missingDays = 0;
        if (simulator.CurrentTime.Month + 1 == 13)
            missingDays = (new DateTime(simulator.CurrentTime.Year + 1, 1, 1) - simulator.CurrentTime).Days;
        else
            missingDays = (new DateTime(simulator.CurrentTime.Year, simulator.CurrentTime.Month + 1, 1) - simulator.CurrentTime).Days;
        
        simulator.TimeSkipDays(missingDays,true);
        
        if (simulator.CurrentTime.Month + 1 == 13)
            missingDays = (new DateTime(simulator.CurrentTime.Year + 1, 1, 1) - simulator.CurrentTime).Days;
        else
            missingDays = (new DateTime(simulator.CurrentTime.Year, simulator.CurrentTime.Month + 1, 1) - simulator.CurrentTime).Days;
        
        // Master Claim - Not work
        simulator.BeginBlock();
        simulator.GenerateCustomTransaction(user, ProofOfWork.Minimal, () =>
            ScriptUtils.BeginScript()
                .AllowGas(stakeAddress, Address.Null, simulator.MinimumFee, simulator.MinimumGasLimit)
                .CallContract(NativeContractKind.Stake, nameof(StakeContract.MasterClaim), stakeAddress)
                .SpendGas(stakeAddress)
                .EndScript());
        simulator.EndBlock();
        Assert.False(simulator.LastBlockWasSuccessful());
        
        // Master Claim - Should not work
        simulator.BeginBlock();
        simulator.GenerateCustomTransaction(user, ProofOfWork.Minimal, () =>
            ScriptUtils.BeginScript()
                .AllowGas(user.Address, Address.Null, simulator.MinimumFee, simulator.MinimumGasLimit)
                .CallContract(NativeContractKind.Stake, nameof(StakeContract.MasterClaim), owner.Address)
                .SpendGas(user.Address)
                .EndScript());
        simulator.EndBlock();
        Assert.False(simulator.LastBlockWasSuccessful());
        
        // Master Claim - Should not work
        simulator.BeginBlock();
        simulator.GenerateCustomTransaction(user, ProofOfWork.Minimal, () =>
            ScriptUtils.BeginScript()
                .AllowGas(owner.Address, Address.Null, simulator.MinimumFee, simulator.MinimumGasLimit)
                .CallContract(NativeContractKind.Stake, nameof(StakeContract.MasterClaim), owner.Address)
                .SpendGas(owner.Address)
                .EndScript());
        simulator.EndBlock();
        Assert.False(simulator.LastBlockWasSuccessful());
        
        // This is a valid MasterClaim
        missingDays = 0;
        if (simulator.CurrentTime.Month + 1 == 13)
            missingDays = (new DateTime(simulator.CurrentTime.Year + 1, 1, 1) - simulator.CurrentTime).Days;
        else
            missingDays = (new DateTime(simulator.CurrentTime.Year, simulator.CurrentTime.Month + 1, 1) - simulator.CurrentTime).Days;
        
        simulator.TimeSkipDays(missingDays,true);
        
        // Should Work
        simulator.BeginBlock();
        simulator.GenerateCustomTransaction(user, ProofOfWork.Minimal, () =>
            ScriptUtils.BeginScript()
                .AllowGas(user.Address, Address.Null, simulator.MinimumFee, simulator.MinimumGasLimit)
                .CallContract(NativeContractKind.Stake, nameof(StakeContract.MasterClaim), user.Address)
                .SpendGas(user.Address)
                .EndScript());
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());
    }
    
    [Fact]
    public void ClaimKCALFromOtherUsers()
    {
        var baseSoul = UnitConversion.ToBigInteger(60000m, DomainSettings.StakingTokenDecimals);
        var baseKcal = UnitConversion.ToBigInteger(100000, DomainSettings.FuelTokenDecimals);
        
        var soulToSteal = UnitConversion.ToBigInteger(50m, DomainSettings.StakingTokenDecimals);

        // Init tokens
        simulator.BeginBlock();
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, user2.Address, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, user2.Address, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.GenerateTransfer(owner, stakeAddress, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, stakeAddress, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());
        
        // Stake
        StakeSoul(user, user.Address, user.Address, UnitConversion.ToBigInteger(50000, DomainSettings.StakingTokenDecimals));
        StakeSoul(user2, user2.Address, user2.Address, UnitConversion.ToBigInteger(50000, DomainSettings.StakingTokenDecimals));
        
        // Should not work
        StakeSoul(user, stakeAddress, stakeAddress, UnitConversion.ToBigInteger(50000, DomainSettings.StakingTokenDecimals), true);

        DeployContract(user, user.Address, user.Address, "exploitv2", EXPLOITV2_CONTRACT_PVM, EXPLOITV2_CONTRACT_ABI, true);
        
        // Claim with stake address - Should not work
        Claim(user, user.Address, stakeAddress, stakeAddress, true);

        // Claim others users
        // Attempt 1 
        Claim(user, user.Address, user.Address, user2.Address, true);
        
        // Attempt 2
        Claim(user, user2.Address, user.Address, user2.Address, true);
        
        // Attempt 3
        Claim(user, user2.Address, user2.Address, user2.Address, true);
        
        // Attempt 4
        Claim(user, user.Address, user2.Address, user2.Address, true);
        
        // Attempt 5
        Claim(user, user2.Address, user2.Address, user.Address, true);
        
        // Attempt 6
        Claim(user, user.Address, user2.Address, user.Address, true);
        
        // Attempt 7
        Claim(user, user2.Address, user.Address, user.Address, true);
        
        // Attempt 8 - Should work
        Claim(user, user.Address, user.Address, user.Address);

    }
    
    [Fact]
    public void ChangeStakeRatio()
    {
        var baseSoul = UnitConversion.ToBigInteger(60000m, DomainSettings.StakingTokenDecimals);
        var baseKcal = UnitConversion.ToBigInteger(10000m, DomainSettings.FuelTokenDecimals);
        
        var soulToSteal = UnitConversion.ToBigInteger(50m, DomainSettings.StakingTokenDecimals);
        
        // Init tokens
        simulator.BeginBlock();
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, user2.Address, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, user2.Address, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.GenerateTransfer(owner, stakeAddress, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, stakeAddress, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());
        
        // Stake
        StakeSoul(user, user.Address, user.Address, UnitConversion.ToBigInteger(50000, DomainSettings.StakingTokenDecimals));
        
        // Deploy Contract
        DeployContract(user, user.Address, user.Address, "bomb", BOMB_CONTRACT_PVM, BOMB_CONTRACT_ABI, true);
        
        // Check Stake Ratio
        var stakeRatio = simulator.InvokeContract(NativeContractKind.Stake, nameof(StakeContract.GetRate)).AsNumber();
        Assert.NotEqual(1000000000000000000, stakeRatio);
        Assert.Equal(500, stakeRatio);
    }
    
    [Fact]
    public void ExploitUsingIsWitness()
    {
        var baseSoul = UnitConversion.ToBigInteger(60000m, DomainSettings.StakingTokenDecimals);
        var baseKcal = UnitConversion.ToBigInteger(10000m, DomainSettings.FuelTokenDecimals);
        
        var soulToSteal = UnitConversion.ToBigInteger(50m, DomainSettings.StakingTokenDecimals);

        var contract1 = NativeContract.GetNativeContractByAddress(Address.FromText("S3dGz1deZweAiMVPHL328X3pVNpANQVjgX4MoRGpbNNAfrB"));
        var contract2 = NativeContract.GetNativeContractByAddress(Address.FromText("S3d6t7E2HJnC6nfhwTZi8HLPyjD9RVdCE3wRpyJbQraZDCY"));
        var contract3 = NativeContract.GetNativeContractByAddress(Address.FromText("S3dGQ4o4tABpRkVugPyCUeAE4oXinNbxF6C1gfkhXQNDDTU"));
        var contract4 = NativeContract.GetNativeContractByAddress(Address.FromText("S3dM8jSgmnejhWx2bwKq3WS6GLns2RU7EdsbotbsVNQqRAx"));
        
        //var contract2_2 = simulator.Nexus.RootChain.GetNameFromAddress(simulator.Nexus.RootStorage, Address.FromText("S3dM8jSgmnejhWx2bwKq3WS6GLns2RU7EdsbotbsVNQqRAx"), simulator.CurrentTime);
        //Assert.Fail(contract2_2);
        
        // Init tokens
        simulator.BeginBlock();
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, user2.Address, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, user2.Address, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.GenerateTransfer(owner, user3.Address, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, user3.Address, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.GenerateTransfer(owner, stakeAddress, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, stakeAddress, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());
        
        simulator.BeginBlock();
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());

        // Stake
        StakeSoul(user, user.Address, user.Address, UnitConversion.ToBigInteger(50000, DomainSettings.StakingTokenDecimals));
        
        StakeSoul(user2, user2.Address, user2.Address, UnitConversion.ToBigInteger(50000, DomainSettings.StakingTokenDecimals));
        
        // Deploy Contract - Exploit
        DeployContract(user, user.Address, user.Address, "exploit", EXPLOIT_CONTRACT_PVM, EXPLOIT_CONTRACT_ABI, true);

        // Deploy Contract Custom Contract
        DeployContract(user, user.Address, user.Address, "store", STORE_CONTRACT_PVM, STORE_CONTRACT_ABI);

        var countContractBefore = simulator.InvokeContract("store", "getNumber").AsNumber();
        
        // Upgrade Account Contract
        // Should Fail the upgrade 
        UpgradeContract(user, user.Address, user.Address, "account", ACCOUNT_CONTRACT_PVM, ACCOUNT_CONTRACT_ABI, true );

        simulator.TimeSkipDays(2);

        var soulBalance = nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, DomainSettings.StakingTokenSymbol, user.Address);

        RegisterScript(user, user.Address, user.Address, "account", ACCOUNT_CONTRACT_PVM, ACCOUNT_CONTRACT_ABI);
        
        var countContractAfter = simulator.InvokeContract("store", "getNumber").AsNumber();
        var calledTransfer = simulator.InvokeContract("store", "getCalled").AsBool();
        Assert.False(calledTransfer);
        Assert.NotEqual(countContractBefore, countContractAfter);

        simulator.TimeSkipDays(2);

        // Stake again for allowed deploy script
        StakeSoul(user, user.Address, user.Address, UnitConversion.ToBigInteger(50000, DomainSettings.StakingTokenDecimals));
        
        // Register Script should fail
        RegisterScript(user, user.Address, user.Address, "stake", STAKE_CONTRACT_PVM, STAKE_CONTRACT_ABI, true);
        
        var stakeBalance = simulator.Nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, DomainSettings.StakingTokenSymbol, stakeAddress);
        
        // Stake
        StakeSoul(user, user.Address, stakeAddress, stakeBalance, true);
        
        // Skip days so you can claim.
        simulator.TimeSkipDays(2);

        // Unstake
        Unstake(user, user.Address, stakeAddress, stakeBalance - UnitConversion.ToBigInteger(10, DomainSettings.StakingTokenDecimals), true);

        var soulBalanceAfter = nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, DomainSettings.StakingTokenSymbol, user.Address);

        // Assert
        Assert.Equal(soulBalance - (UnitConversion.ToBigInteger(50000, DomainSettings.StakingTokenDecimals)), soulBalanceAfter);
    }

    [Fact]
    public void GetAllTheStaked()
    {
        //var user3 = PhantasmaKeys.FromWIF("L23uui4wEq9P67gQXgqwc7EnLkby9wC2MwtdYmcvFEQ9frNkrSaA"); // P2KFojXbJuJLr7yYHDhANEvrxBEcngaz2nJnovKvk5CTmFg

        var baseSoul = UnitConversion.ToBigInteger(60000m, DomainSettings.StakingTokenDecimals);
        var baseKcal = UnitConversion.ToBigInteger(10000m, DomainSettings.FuelTokenDecimals);
        
        var soulToSteal = UnitConversion.ToBigInteger(50m, DomainSettings.StakingTokenDecimals);
        
        var contract1 = NativeContract.GetNativeContractByAddress(Address.FromText("S3dGz1deZweAiMVPHL328X3pVNpANQVjgX4MoRGpbNNAfrB"));
        var contract2 = NativeContract.GetNativeContractByAddress(Address.FromText("S3d6t7E2HJnC6nfhwTZi8HLPyjD9RVdCE3wRpyJbQraZDCY"));
        var contract3 = NativeContract.GetNativeContractByAddress(Address.FromText("S3dGQ4o4tABpRkVugPyCUeAE4oXinNbxF6C1gfkhXQNDDTU"));
        var contract4 = NativeContract.GetNativeContractByAddress(Address.FromText("S3dM8jSgmnejhWx2bwKq3WS6GLns2RU7EdsbotbsVNQqRAx"));
        
        //var contract2_2 = simulator.Nexus.RootChain.GetNameFromAddress(simulator.Nexus.RootStorage, Address.FromText("S3dM8jSgmnejhWx2bwKq3WS6GLns2RU7EdsbotbsVNQqRAx"), simulator.CurrentTime);
        //Assert.Fail(contract2_2);
        
        // Init tokens
        simulator.BeginBlock();
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, user2.Address, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, user2.Address, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.GenerateTransfer(owner, user3.Address, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, user3.Address, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.GenerateTransfer(owner, stakeAddress, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, stakeAddress, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());
        
        simulator.BeginBlock();
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());
        
        // Stake user address
        StakeSoul(user, user.Address, user.Address, UnitConversion.ToBigInteger(50000, DomainSettings.StakingTokenDecimals));
        StakeSoul(user2, user2.Address, user2.Address, UnitConversion.ToBigInteger(50000, DomainSettings.StakingTokenDecimals));

        // Deploy Contract - Exploit contract gives you access to the AccountContract
        DeployContract(user, user.Address, user.Address, "exploit", EXPLOIT_CONTRACT_PVM, EXPLOIT_CONTRACT_ABI, true);

        // Deploy custom contract to store values
        DeployContract(user, user.Address, user.Address, "store", STORE_CONTRACT_PVM, STORE_CONTRACT_ABI);

        var countContractBefore = simulator.InvokeContract("store", "getNumber").AsNumber();
        
        // Should fail
        UpgradeContract(user, user.Address, user.Address, "account", ACCOUNT_CONTRACT_PVM, ACCOUNT_CONTRACT_ABI, true);
        
        simulator.TimeSkipDays(2);

        var stakeBalance = simulator.Nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, DomainSettings.StakingTokenSymbol, stakeAddress);
        
        // Stake & Claim the stake address for allowing it to be migrated.
        simulator.BeginBlock();
        simulator.GenerateCustomTransaction(user, ProofOfWork.Minimal, () =>
            ScriptUtils.BeginScript()
                .AllowGas(user.Address, Address.Null, simulator.MinimumFee, simulator.MinimumGasLimit)
                .CallContract(NativeContractKind.Stake, nameof(StakeContract.Stake), stakeAddress, stakeBalance)
                .CallContract(NativeContractKind.Stake, nameof(StakeContract.Claim), stakeAddress, stakeAddress)
                .SpendGas(user.Address)
                .EndScript());
        simulator.EndBlock();
        Assert.False(simulator.LastBlockWasSuccessful());

        var soulBalance = nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, DomainSettings.StakingTokenSymbol, user3.Address);

        // Register Script Account - Should pass
        RegisterScript(user, user.Address, user.Address, "account", ACCOUNT_CONTRACT_PVM, ACCOUNT_CONTRACT_ABI);
        
        // Skip time so you can unstake
        simulator.TimeSkipDays(2);

        var countContractAfter = simulator.InvokeContract("store", "getNumber").AsNumber();
        var calledTransfer = simulator.InvokeContract("store", "getCalled").AsBool();
        Assert.False(calledTransfer);
        Assert.NotEqual(countContractBefore, countContractAfter);
        
        simulator.TimeSkipDays(2);

        // Stake again for allowed deploy script
        StakeSoul(user, user.Address, user.Address, UnitConversion.ToBigInteger(50000, DomainSettings.StakingTokenDecimals));

        // Should Fail - Can't have 2 scripts in the same address.
        RegisterScript(user, user.Address, user.Address, "stake", STAKE_CONTRACT_PVM, STAKE_CONTRACT_ABI, true);
        
        simulator.TimeSkipDays(2);

        // Should not be able to unstake
        Unstake(user3, user3.Address, user3.Address, UnitConversion.ToBigInteger(50000, DomainSettings.StakingTokenDecimals), true);
        Unstake(user3, user3.Address, user3.Address, UnitConversion.ToBigInteger(50000, DomainSettings.StakingTokenDecimals), true);
        
        var soulBalanceAfter = nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, DomainSettings.StakingTokenSymbol, user3.Address);

        // Assert
        Assert.Equal(soulBalance, soulBalanceAfter);
    }

    [Fact]
    public void RegisterTriggerExploit()
    {
        var baseSoul = UnitConversion.ToBigInteger(60000m, DomainSettings.StakingTokenDecimals);
        var baseKcal = UnitConversion.ToBigInteger(10000m, DomainSettings.FuelTokenDecimals);
        
        var soulToSteal = UnitConversion.ToBigInteger(50m, DomainSettings.StakingTokenDecimals);
        
        var contract1 = NativeContract.GetNativeContractByAddress(Address.FromText("S3dGz1deZweAiMVPHL328X3pVNpANQVjgX4MoRGpbNNAfrB"));
        var contract2 = NativeContract.GetNativeContractByAddress(Address.FromText("S3d6t7E2HJnC6nfhwTZi8HLPyjD9RVdCE3wRpyJbQraZDCY"));
        var contract3 = NativeContract.GetNativeContractByAddress(Address.FromText("S3dGQ4o4tABpRkVugPyCUeAE4oXinNbxF6C1gfkhXQNDDTU"));
        var contract4 = NativeContract.GetNativeContractByAddress(Address.FromText("S3dM8jSgmnejhWx2bwKq3WS6GLns2RU7EdsbotbsVNQqRAx"));
        
        //var contract2_2 = simulator.Nexus.RootChain.GetNameFromAddress(simulator.Nexus.RootStorage, Address.FromText("S3dM8jSgmnejhWx2bwKq3WS6GLns2RU7EdsbotbsVNQqRAx"), simulator.CurrentTime);
        //Assert.Fail(contract2_2);
        
        // Init tokens
        simulator.BeginBlock();
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, user2.Address, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, user2.Address, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.GenerateTransfer(owner, user3.Address, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, user3.Address, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.GenerateTransfer(owner, stakeAddress, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, stakeAddress, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());
        
        // Stake Users
        StakeSoul(user, user.Address, user.Address, UnitConversion.ToBigInteger(50000, DomainSettings.StakingTokenDecimals));
        
        StakeSoul(user2, user2.Address, user2.Address, UnitConversion.ToBigInteger(50000, DomainSettings.StakingTokenDecimals));

        var soulBalanceBefore = nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, DomainSettings.StakingTokenSymbol, user.Address);

        simulator.TimeSkipDays(2);
        
        // Deploy Contract Custom Contract
        DeployContract(user, user.Address, user.Address, "store", STORE_CONTRACT_PVM, STORE_CONTRACT_ABI);
        var countContractBefore = simulator.InvokeContract("store", "getNumberStake").AsNumber();
        
        // TODO: Almost hacking
        // Register Script to Override IsWitness
        RegisterScript(user, user.Address, user.Address, "stake", STAKE_CONTRACT_PVM, STAKE_CONTRACT_ABI);
        
        var countContractAfter = simulator.InvokeContract("store", "getNumberStake").AsNumber();
        var calledTransfer = simulator.InvokeContract("store", "getCalled").AsBool();
        Assert.NotEqual(countContractBefore, countContractAfter);
        Assert.False(calledTransfer);
        countContractBefore = countContractAfter;

        // Stake SOUL to trigger the IsWitness
        StakeSoul(user, user.Address, user.Address, UnitConversion.ToBigInteger(10, DomainSettings.StakingTokenDecimals));

        countContractAfter = simulator.InvokeContract("store", "getNumberStake").AsNumber();
        calledTransfer = simulator.InvokeContract("store", "getCalled").AsBool();
        Assert.NotEqual(countContractBefore, countContractAfter);
        Assert.False(calledTransfer);
        countContractBefore = countContractAfter;
        
        // Stake SOUL  to trigger the IsWitness
        StakeSoul(user, user.Address, user.Address, UnitConversion.ToBigInteger(10, DomainSettings.StakingTokenDecimals));
        
        countContractAfter = simulator.InvokeContract("store", "getNumberStake").AsNumber();
        Assert.NotEqual(countContractBefore, countContractAfter);
        countContractBefore = countContractAfter;

        var soulBalanceAfter = nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, DomainSettings.StakingTokenSymbol, user.Address);

        // Assert
        Assert.Equal(soulBalanceBefore-(UnitConversion.ToBigInteger(10, DomainSettings.StakingTokenDecimals) * 2), soulBalanceAfter);
    }


    [Fact]
    public void StealAllStakedSOULMethod2()
    {
        var baseSoul = UnitConversion.ToBigInteger(60000m, DomainSettings.StakingTokenDecimals);
        var baseKcal = UnitConversion.ToBigInteger(1000, DomainSettings.FuelTokenDecimals);
        
        var soulToSteal = UnitConversion.ToBigInteger(50m, DomainSettings.StakingTokenDecimals);

        // Init tokens
        simulator.BeginBlock();
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, stakeAddress, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, stakeAddress, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());
        
        // Stake for testing
        StakeSoul(user, user.Address, user.Address, UnitConversion.ToBigInteger(50000, DomainSettings.StakingTokenDecimals));

        simulator.TimeSkipDays(2);
        
        // Let's test
        var stakeBefore = simulator.InvokeContract(NativeContractKind.Stake, nameof(StakeContract.GetStake), stakeAddress).AsNumber();
        Unstake(user, user.Address, owner.Address, soulToSteal, true);
        
        var stakeAfter = simulator.InvokeContract(NativeContractKind.Stake, nameof(StakeContract.GetStake), stakeAddress).AsNumber();
        Assert.Equal(stakeBefore, stakeAfter);

        // Test for owner
        stakeBefore = simulator.InvokeContract(NativeContractKind.Stake, nameof(StakeContract.GetStake), owner.Address).AsNumber();
        Unstake(user, owner.Address, owner.Address, soulToSteal, true);

        stakeAfter = simulator.InvokeContract(NativeContractKind.Stake, nameof(StakeContract.GetStake), owner.Address).AsNumber();
        Assert.Equal(stakeBefore, stakeAfter);
        
        // Test for owner method 2
        stakeBefore = simulator.InvokeContract(NativeContractKind.Stake, nameof(StakeContract.GetStake), owner.Address).AsNumber();
        Unstake(user, user.Address, owner.Address, soulToSteal, true);
        
        stakeAfter = simulator.InvokeContract(NativeContractKind.Stake, nameof(StakeContract.GetStake), owner.Address).AsNumber();
        Assert.Equal(stakeBefore, stakeAfter);
        
        // Test Another method
        stakeBefore = simulator.InvokeContract(NativeContractKind.Stake, nameof(StakeContract.GetStake), user.Address).AsNumber();
        simulator.BeginBlock();
        simulator.GenerateCustomTransaction(user, ProofOfWork.Minimal, () =>
            ScriptUtils.BeginScript()
                .AllowGas( stakeAddress, Address.Null, simulator.MinimumFee, simulator.MinimumGasLimit)
                .TransferBalance("SOUL", stakeAddress, user.Address)
                .SpendGas( stakeAddress)
                .EndScript());
        simulator.EndBlock();
        Assert.False(simulator.LastBlockWasSuccessful());
        
        stakeAfter = simulator.InvokeContract(NativeContractKind.Stake, nameof(StakeContract.GetStake), user.Address).AsNumber();
        Assert.Equal(stakeBefore, stakeAfter);
        
        // Test Another method 2
        stakeBefore = simulator.InvokeContract(NativeContractKind.Stake, nameof(StakeContract.GetStake), owner.Address).AsNumber();
        simulator.BeginBlock();
        simulator.GenerateCustomTransaction(user, ProofOfWork.Minimal, () =>
            ScriptUtils.BeginScript()
                .AllowGas( owner.Address, Address.Null, simulator.MinimumFee, simulator.MinimumGasLimit)
                .TransferBalance("SOUL", owner.Address, user.Address)
                .SpendGas( owner.Address)
                .EndScript());
        simulator.EndBlock();
        Assert.False(simulator.LastBlockWasSuccessful());
        
        stakeAfter = simulator.InvokeContract(NativeContractKind.Stake, nameof(StakeContract.GetStake), owner.Address).AsNumber();
        Assert.Equal(stakeBefore, stakeAfter);
        stakeBefore =  simulator.Nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, "SOUL", user.Address);

        // Test Another method 3
        AccountMigrate(user, user.Address, user.Address, stakeAddress, true);

        stakeAfter = simulator.Nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, "SOUL", user.Address);
        Assert.Equal(stakeBefore, stakeAfter);
        var stakeBeforeUser2 = simulator.Nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, "SOUL", user2.Address);

        // Should Migrate user
        AccountMigrate(user, user.Address, user.Address, user2.Address, false);
        
        stakeAfter = simulator.Nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, "SOUL", user2.Address);
        Assert.Equal(stakeBefore+stakeBeforeUser2, stakeAfter);
        
        stakeAfter = simulator.Nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, "SOUL", user2.Address);
        AccountMigrate(user, owner.Address, owner.Address, user2.Address, true);
        
        stakeAfter = simulator.Nexus.RootChain.GetTokenBalance(simulator.Nexus.RootStorage, "SOUL", user2.Address);
        Assert.Equal(stakeBefore+stakeBeforeUser2, stakeAfter);
    }

    [Fact]
    public void TestInifiteWhileLoop()
    {
         var baseSoul = UnitConversion.ToBigInteger(60000m, DomainSettings.StakingTokenDecimals);
        var baseKcal = UnitConversion.ToBigInteger(10000m, DomainSettings.FuelTokenDecimals);
        
        var soulToSteal = UnitConversion.ToBigInteger(50m, DomainSettings.StakingTokenDecimals);
        
        var contract1 = NativeContract.GetNativeContractByAddress(Address.FromText("S3dGz1deZweAiMVPHL328X3pVNpANQVjgX4MoRGpbNNAfrB"));
        var contract2 = NativeContract.GetNativeContractByAddress(Address.FromText("S3d6t7E2HJnC6nfhwTZi8HLPyjD9RVdCE3wRpyJbQraZDCY"));
        var contract3 = NativeContract.GetNativeContractByAddress(Address.FromText("S3dGQ4o4tABpRkVugPyCUeAE4oXinNbxF6C1gfkhXQNDDTU"));
        var contract4 = NativeContract.GetNativeContractByAddress(Address.FromText("S3dM8jSgmnejhWx2bwKq3WS6GLns2RU7EdsbotbsVNQqRAx"));
        
        //var contract2_2 = simulator.Nexus.RootChain.GetNameFromAddress(simulator.Nexus.RootStorage, Address.FromText("S3dM8jSgmnejhWx2bwKq3WS6GLns2RU7EdsbotbsVNQqRAx"), simulator.CurrentTime);
        //Assert.Fail(contract2_2);
        
        // Init tokens
        simulator.BeginBlock();
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, user2.Address, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, user2.Address, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.GenerateTransfer(owner, user3.Address, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, user3.Address, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.GenerateTransfer(owner, stakeAddress, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, stakeAddress, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());
        
        simulator.BeginBlock();
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());
        
        // Stake user address
        StakeSoul(user, user.Address, user.Address, UnitConversion.ToBigInteger(50000, DomainSettings.StakingTokenDecimals));
        StakeSoul(user2, user2.Address, user2.Address, UnitConversion.ToBigInteger(50000, DomainSettings.StakingTokenDecimals));

        // Deploy Contract - Exploit contract gives you access to the AccountContract
        DeployContract(user, user.Address, user.Address, "infinite", INFINITE_CONTRACT_PVM, INFINITE_CONTRACT_ABI);
        
        // Call specific method
        Assert.Throws<ChainException>( () => simulator.InvokeContract("infinite", "testInfinite"));
    }

    [Fact]
    public void TestOverrideExistingTokenWithContract()
    {
        var baseSoul = UnitConversion.ToBigInteger(60000m, DomainSettings.StakingTokenDecimals);
        var baseKcal = UnitConversion.ToBigInteger(10000m, DomainSettings.FuelTokenDecimals);
        
        var soulToSteal = UnitConversion.ToBigInteger(50m, DomainSettings.StakingTokenDecimals);

        // Init tokens
        simulator.BeginBlock();
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, stakeAddress, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, stakeAddress, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());
        
        // Stake for testing
        StakeSoul(user, user.Address, user.Address, UnitConversion.ToBigInteger(50000, DomainSettings.StakingTokenDecimals));

        simulator.TimeSkipDays(2);

        DeployContract(user, user.Address, user.Address, "soul", SOUL_CONTRACT_PVM, SOUL_CONTRACT_ABI, true);
        
    }

    [Fact]
    public void KillNotMyContract()
    {
        var baseSoul = UnitConversion.ToBigInteger(60000m, DomainSettings.StakingTokenDecimals);
        var baseKcal = UnitConversion.ToBigInteger(10000m, DomainSettings.FuelTokenDecimals);
        
        var soulToSteal = UnitConversion.ToBigInteger(50m, DomainSettings.StakingTokenDecimals);

        // Init tokens
        simulator.BeginBlock();
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, stakeAddress, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, stakeAddress, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());
        
        // Stake for testing
        StakeSoul(user, user.Address, user.Address, UnitConversion.ToBigInteger(50000, DomainSettings.StakingTokenDecimals));

        simulator.TimeSkipDays(2);

        KillContract(user, user.Address, user.Address, "exchange", true);
        
        DeployContract(user, user.Address, user.Address, "store", STORE_CONTRACT_PVM, STORE_CONTRACT_ABI);

        KillContract(user, user.Address, user.Address, "LP" , true);

        // Cannot kill store contract because it doesn't have the onKill trigger method
        KillContract(user, user.Address, user.Address, "store", true);
        
        DeployContract(user, user.Address, user.Address, "store", STORE_CONTRACT_PVM, STORE_CONTRACT_ABI, true);

        KillContract(owner, owner.Address, owner.Address, "store", true);

    }

    [Fact]
    public void ExploitOrganizations()
    {
        var baseSoul = UnitConversion.ToBigInteger(60000m, DomainSettings.StakingTokenDecimals);
        var baseKcal = UnitConversion.ToBigInteger(10000m, DomainSettings.FuelTokenDecimals);
        var daoName = "exploits";
        
        var soulToSteal = UnitConversion.ToBigInteger(50m, DomainSettings.StakingTokenDecimals);

        // Init tokens
        simulator.BeginBlock();
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.GenerateTransfer(owner, user.Address, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, stakeAddress, simulator.Nexus.RootChain, DomainSettings.StakingTokenSymbol, baseSoul);
        simulator.GenerateTransfer(owner, stakeAddress, simulator.Nexus.RootChain, DomainSettings.FuelTokenSymbol, baseKcal);
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());
        
        // TRY - Remove from the DAO without permission
        RemoveMember(user, user.Address, user.Address, DomainSettings.ValidatorsOrganizationName, owner.Address, true);
        
        // Try - Remove from the DAO
        RemoveMember(user, user.Address, owner.Address, DomainSettings.ValidatorsOrganizationName, owner.Address, true);
        
        // Try - Add to the DAO without permission
        AddMember(user, user.Address, user.Address, DomainSettings.ValidatorsOrganizationName, user.Address, true);
        
        // Try - Add to the DAO
        AddMember(user, user.Address, owner.Address, DomainSettings.ValidatorsOrganizationName, user.Address, true);

        // Try Member of the DAO can add people to the DAO ? 
        AddMember(owner, owner.Address, owner.Address, DomainSettings.ValidatorsOrganizationName, user.Address, true);

        // Try - Create DAO with existing
        CreateDAO(owner, owner.Address, owner.Address, "validators", DomainSettings.ValidatorsOrganizationName, new byte[0], true);
        
        // Try - Create DAO 
        CreateDAO(user, user.Address, user.Address, daoName, daoName, new byte[0]);
        
        var org = simulator.Nexus.GetOrganizationByName(simulator.Nexus.RootStorage, daoName);

        // Try - Add Member to the DAO
        AddMember(user, user.Address, org.Address, daoName, owner.Address, false);
        
        // Try - Remove Member from the DAO 
        RemoveMember(user, user.Address, org.Address, daoName, owner.Address, true);
        
        // Try to add new member to the DAO (should fail)
        AddMember(user, user.Address, org.Address, daoName, user2.Address, true);

        // Add new member to the DAO
        simulator.BeginBlock();
        var tx = new Transaction("simnet", "main",  ScriptUtils.BeginScript()
            .AllowGas(user.Address, Address.Null, simulator.MinimumFee, simulator.MinimumGasLimit)
            .CallInterop("Organization.AddMember", org.Address, daoName, user2.Address)
            .SpendGas(user.Address)
            .EndScript(), simulator.CurrentTime, "test");
        tx.Sign(user);
        tx.Sign(owner);
        simulator.SendRawTransaction(tx);
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());
        
        // Try to remove member from the DAO (should fail)
        RemoveMember(user, user.Address, org.Address, daoName, user2.Address, true);
        
        // Remove member from the DAO
        simulator.BeginBlock();
        tx = new Transaction("simnet", "main",  ScriptUtils.BeginScript()
            .AllowGas(user.Address, Address.Null, simulator.MinimumFee, simulator.MinimumGasLimit)
            .CallInterop("Organization.RemoveMember", org.Address, daoName, user2.Address)
            .SpendGas(user.Address)
            .EndScript(), simulator.CurrentTime, "test");
        tx.Sign(user);
        tx.Sign(owner);
        simulator.SendRawTransaction(tx);
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());
        
        // Add new member to the DAO
        simulator.BeginBlock();
        tx = new Transaction("simnet", "main",  ScriptUtils.BeginScript()
            .AllowGas(user.Address, Address.Null, simulator.MinimumFee, simulator.MinimumGasLimit)
            .CallInterop("Organization.AddMember", org.Address, daoName, user2.Address)
            .SpendGas(user.Address)
            .EndScript(), simulator.CurrentTime, "test");
        tx.Sign(user);
        tx.Sign(owner);
        simulator.SendRawTransaction(tx);
        simulator.EndBlock();
        Assert.True(simulator.LastBlockWasSuccessful());
        
        // Remove member from the DAO
        simulator.BeginBlock();
        tx = new Transaction("simnet", "main",  ScriptUtils.BeginScript()
            .AllowGas(user.Address, Address.Null, simulator.MinimumFee, simulator.MinimumGasLimit)
            .CallInterop("Organization.RemoveMember", org.Address, daoName, user2.Address)
            .SpendGas(user.Address)
            .EndScript(), simulator.CurrentTime, "test");
        tx.Sign(user);
        tx.Sign(user);
        simulator.SendRawTransaction(tx);
        simulator.EndBlock();
        Assert.False(simulator.LastBlockWasSuccessful());
        
        // Create DAO SOUL
        CreateDAO(user, user.Address, user.Address, "soul", "soul", new byte[0], true);
        CreateDAO(user, user.Address, user.Address, "SOUL", "SOUL", new byte[0], true);
        
        // Create DAO KCAL
        CreateDAO(user, user.Address, user.Address, "KCAL", "KCAL", new byte[0], true);
        
        // Create DAO Stake
        CreateDAO(user, user.Address, user.Address, "stake", "stake", new byte[0], true);
    }

    #region Helper Functions
    private void AccountMigrate(PhantasmaKeys _user, Address gasAddress, Address userFromAddress, Address userToAddress , bool shouldFail = false)
    {
        simulator.BeginBlock();
        simulator.GenerateCustomTransaction(_user, ProofOfWork.Minimal, () =>
            ScriptUtils.BeginScript()
                .AllowGas( gasAddress, Address.Null, simulator.MinimumFee, simulator.MinimumGasLimit)
                .CallContract(NativeContractKind.Account, nameof(AccountContract.Migrate), userFromAddress, userToAddress)
                .SpendGas( gasAddress )
                .EndScript());
        simulator.EndBlock();
        if (shouldFail)
            Assert.False(simulator.LastBlockWasSuccessful());
        else
            Assert.True(simulator.LastBlockWasSuccessful());
    }
    
    private void StakeSoul(PhantasmaKeys _user, Address userGasAddress, Address userAddress, BigInteger amount, bool shouldFail = false)
    {
        simulator.BeginBlock();
        simulator.GenerateCustomTransaction(_user, ProofOfWork.Minimal, () =>
            ScriptUtils.BeginScript()
                .AllowGas(userGasAddress, Address.Null, simulator.MinimumFee, simulator.MinimumGasLimit)
                .CallContract(NativeContractKind.Stake, nameof(StakeContract.Stake), userAddress, amount)
                .SpendGas(userGasAddress)
                .EndScript());
        simulator.EndBlock();
        if (shouldFail)
            Assert.False(simulator.LastBlockWasSuccessful());
        else
            Assert.True(simulator.LastBlockWasSuccessful());
    }

    private void Unstake(PhantasmaKeys _user, Address userGasAddress, Address userAddress, BigInteger amount, bool shouldFail = false)
    {
        simulator.BeginBlock();
        simulator.GenerateCustomTransaction(_user, ProofOfWork.Minimal, () =>
            ScriptUtils.BeginScript()
                .AllowGas( userGasAddress, Address.Null, simulator.MinimumFee, simulator.MinimumGasLimit)
                .CallContract(NativeContractKind.Stake, nameof(StakeContract.Unstake), userAddress, amount )
                .SpendGas( userGasAddress )
                .EndScript());
        simulator.EndBlock();
        if (shouldFail)
            Assert.False(simulator.LastBlockWasSuccessful());
        else
            Assert.True(simulator.LastBlockWasSuccessful());
    }

    private BigInteger CreateToken(PhantasmaKeys _user, Address gasAddress, Address userAddress, string contractName,
        byte[] contractPVM, byte[] contractABI, bool shouldFail = false)
    {
        simulator.BeginBlock();
        var tx = simulator.GenerateCustomTransaction(_user, ProofOfWork.Minimal,
            () => ScriptUtils.BeginScript()
                .AllowGas(gasAddress, Address.Null, simulator.MinimumFee, 1000000)
                .CallInterop("Nexus.CreateToken", userAddress, contractPVM, contractABI)
                .SpendGas(gasAddress)
                .EndScript());
        simulator.EndBlock();
        if (shouldFail)
            Assert.False(simulator.LastBlockWasSuccessful(), $"Create {contractName} Token Passed... ISSUE");
        else
            Assert.True(simulator.LastBlockWasSuccessful(), $"Create {contractName} Token Passed... ISSUE");
        var txCost2 = simulator.Nexus.RootChain.GetTransactionFee(tx);
        return txCost2;
    }

    private BigInteger DeployContract(PhantasmaKeys _user, Address gasAddress, Address userAddress, string contractName, byte[] contractPVM, byte[] contractABI, bool shouldFail = false)
    {
        simulator.BeginBlock(); 
        var tx = simulator.GenerateCustomTransaction(_user, ProofOfWork.Minimal,
            () => ScriptUtils.BeginScript()
                .AllowGas(gasAddress, Address.Null, simulator.MinimumFee, 1000000)
                .CallInterop("Runtime.DeployContract", userAddress, contractName, contractPVM, contractABI)
                .SpendGas(gasAddress)
                .EndScript());
        simulator.EndBlock();
        if (shouldFail)
            Assert.False(simulator.LastBlockWasSuccessful(), $"Deploying {contractName} Contract Passed... ISSUE");
        else
            Assert.True(simulator.LastBlockWasSuccessful(), $"Deploying {contractName} Contract Passed... ISSUE");
        var txCost2 = simulator.Nexus.RootChain.GetTransactionFee(tx);
        return txCost2;
    }
    
    private BigInteger DeployContract(PhantasmaKeys _user, Address gasAddress, Address userAddress, string contractName,
        string contractPVM, string contractABI, bool shouldFail = false)
    {
        return DeployContract(_user, gasAddress, userAddress, contractName, Base16.Decode(contractPVM),
            Base16.Decode(contractABI), shouldFail);
    }
    
    private BigInteger UpgradeContract(PhantasmaKeys _user, Address gasAddress, Address userAddress, string contractName, byte[] contractPVM, byte[] contractABI, bool shouldFail = false)
    {
        simulator.BeginBlock();
        var tx = simulator.GenerateCustomTransaction(_user, ProofOfWork.Minimal, () =>
            ScriptUtils.BeginScript()
                .AllowGas(gasAddress, Address.Null, simulator.MinimumFee, 1000000)
                .CallInterop("Runtime.UpgradeContract", userAddress, contractName, contractPVM, contractABI)
                .SpendGas(gasAddress)
                .EndScript());
        simulator.EndBlock();
        if (shouldFail)
            Assert.False(simulator.LastBlockWasSuccessful(), $"Upgrading {contractName} Contract Passed... ISSUE");
        else
            Assert.True(simulator.LastBlockWasSuccessful(), $"Upgrading {contractName} Contract Passed... ISSUE");
        var txCost2 = simulator.Nexus.RootChain.GetTransactionFee(tx);
        return txCost2;
    }
    
    private BigInteger UpgradeContract(PhantasmaKeys _user, Address gasAddress, Address userAddress, string contractName,
        string contractPVM, string contractABI, bool shouldFail = false)
    {
        return UpgradeContract(_user, gasAddress, userAddress, contractName, Base16.Decode(contractPVM),
            Base16.Decode(contractABI), shouldFail);
    }

    private BigInteger RegisterScript(PhantasmaKeys _user, Address gasAddress, Address userAddress, string contractName, byte[] contractPVM, byte[] contractABI, bool shouldFail = false)
    {
        simulator.BeginBlock(); 
        var tx = simulator.GenerateCustomTransaction(_user, ProofOfWork.Minimal,
            () => ScriptUtils.BeginScript()
                .AllowGas(gasAddress, Address.Null, simulator.MinimumFee, 1000000)
                .CallContract(NativeContractKind.Account, nameof(AccountContract.RegisterScript), userAddress, contractPVM, contractABI)
                .SpendGas(gasAddress)
                .EndScript());
        simulator.EndBlock();
        if (shouldFail)
            Assert.False(simulator.LastBlockWasSuccessful(), $"Deploying {contractName} Contract Passed... ISSUE");
        else
            Assert.True(simulator.LastBlockWasSuccessful(), $"Deploying {contractName} Contract Passed... ISSUE");
        
        var txCost2 = simulator.Nexus.RootChain.GetTransactionFee(tx);
        return txCost2;
    }

    private BigInteger RegisterScript(PhantasmaKeys _user, Address gasAddress, Address userAddress, string contractName,
        string contractPVM, string contractABI, bool shouldFail = false)
    {
        return RegisterScript(_user, gasAddress, userAddress, contractName, Base16.Decode(contractPVM),
            Base16.Decode(contractABI), shouldFail);
    }

    private BigInteger MintTokens(PhantasmaKeys _user, Address gasAddress, Address fromAddress, Address toAddress, string symbol, BigInteger amount, bool shouldFail = false)
    {
        simulator.BeginBlock();
        var tx = simulator.GenerateCustomTransaction(_user, ProofOfWork.Minimal, () =>
            ScriptUtils.BeginScript()
                .AllowGas(gasAddress, Address.Null, simulator.MinimumFee, 99999)
                .CallInterop("Runtime.MintTokens", fromAddress, toAddress, stakingToken, 100000000).
                SpendGas(gasAddress)
                .EndScript());
        simulator.EndBlock();
        if (shouldFail)
            Assert.False(simulator.LastBlockWasSuccessful());
        else
            Assert.True(simulator.LastBlockWasSuccessful());
        
        var txCost2 = simulator.Nexus.RootChain.GetTransactionFee(tx);
        return txCost2;
    }

    private BigInteger MintToken(PhantasmaKeys _user, Address gasAddress, Address fromAddress, Address toAddress, string symbol, StakeReward reward, byte[] crownRam = null, bool shouldFail = false)
    {
        simulator.BeginBlock();
        var tx = simulator.GenerateCustomTransaction(_user, ProofOfWork.Minimal, () =>
            ScriptUtils.BeginScript()
                .AllowGas(gasAddress, Address.Null, simulator.MinimumFee, 99999)
                .CallInterop("Runtime.MintToken", fromAddress, toAddress, symbol, VMObject.FromStruct(reward), crownRam, 0)
                .SpendGas(gasAddress)
                .EndScript());
        simulator.EndBlock();
        if (shouldFail)
            Assert.False(simulator.LastBlockWasSuccessful());
        else
            Assert.True(simulator.LastBlockWasSuccessful());
        
        var txCost2 = simulator.Nexus.RootChain.GetTransactionFee(tx);
        return txCost2;
    }

    private BigInteger Claim(PhantasmaKeys user, Address gasAddress, Address fromAddress, Address toAddress, bool shouldFail = false)
    {
        simulator.BeginBlock();
        var tx = simulator.GenerateCustomTransaction(user, ProofOfWork.None, () =>
            ScriptUtils.BeginScript()
                .AllowGas(gasAddress, Address.Null, simulator.MinimumFee, simulator.MinimumGasLimit)
                .CallContract(NativeContractKind.Stake, nameof(StakeContract.Claim), fromAddress, toAddress)
                .SpendGas(gasAddress)
                .EndScript());
        simulator.EndBlock();
        if (shouldFail)
            Assert.False(simulator.LastBlockWasSuccessful());
        else
            Assert.True(simulator.LastBlockWasSuccessful());
        
        var txCost2 = simulator.Nexus.RootChain.GetTransactionFee(tx);
        return txCost2;
    }

    private BigInteger KillContract(PhantasmaKeys user, Address gasAddress, Address fromAddress, string contractName, bool shouldFail = false)
    {
        simulator.BeginBlock();
        var tx = simulator.GenerateCustomTransaction(user, ProofOfWork.Minimal, () =>
            ScriptUtils.BeginScript()
                .AllowGas(gasAddress, Address.Null, simulator.MinimumFee, simulator.MinimumGasLimit)
                .CallInterop("Runtime.KillContract", fromAddress, contractName)
                .SpendGas(gasAddress)
                .EndScript());
        simulator.EndBlock();
        if (shouldFail)
            Assert.False(simulator.LastBlockWasSuccessful());
        else
            Assert.True(simulator.LastBlockWasSuccessful());
        
        var txCost2 = simulator.Nexus.RootChain.GetTransactionFee(tx);
        return txCost2;
    }
    
    private BigInteger CreateDAO(PhantasmaKeys user, Address gasAddress, Address fromAddress, string daoID, string daoName, byte[] script, bool shouldFail = false)
    {
        simulator.BeginBlock();
        var tx = simulator.GenerateCustomTransaction(user, ProofOfWork.Minimal, () =>
            ScriptUtils.BeginScript()
                .AllowGas(gasAddress, Address.Null, simulator.MinimumFee, simulator.MinimumGasLimit)
                .CallInterop("Nexus.CreateOrganization", fromAddress, daoID, daoName, script)
                .SpendGas(gasAddress)
                .EndScript());
        simulator.EndBlock();
        if (shouldFail)
            Assert.False(simulator.LastBlockWasSuccessful());
        else
            Assert.True(simulator.LastBlockWasSuccessful());
        
        var txCost2 = simulator.Nexus.RootChain.GetTransactionFee(tx);
        return txCost2;
    }
    
    private BigInteger AddMember(PhantasmaKeys user, Address gasAddress, Address fromAddress, string daoID, Address target, bool shouldFail = false)
    {
        simulator.BeginBlock();
        var tx = simulator.GenerateCustomTransaction(user, ProofOfWork.Minimal, () =>
            ScriptUtils.BeginScript()
                .AllowGas(gasAddress, Address.Null, simulator.MinimumFee, simulator.MinimumGasLimit)
                .CallInterop("Organization.AddMember", fromAddress, daoID, target)
                .SpendGas(gasAddress)
                .EndScript());
        simulator.EndBlock();
        if (shouldFail)
            Assert.False(simulator.LastBlockWasSuccessful());
        else
            Assert.True(simulator.LastBlockWasSuccessful());
        
        var txCost2 = simulator.Nexus.RootChain.GetTransactionFee(tx);
        return txCost2;
    }
    
    private BigInteger RemoveMember(PhantasmaKeys user, Address gasAddress, Address fromAddress, string daoID, Address target, bool shouldFail = false)
    {
        simulator.BeginBlock();
        var tx = simulator.GenerateCustomTransaction(user, ProofOfWork.Minimal, () =>
            ScriptUtils.BeginScript()
                .AllowGas(gasAddress, Address.Null, simulator.MinimumFee, simulator.MinimumGasLimit)
                .CallInterop("Organization.RemoveMember", fromAddress, daoID, target)
                .SpendGas(gasAddress)
                .EndScript());
        simulator.EndBlock();
        if (shouldFail)
            Assert.False(simulator.LastBlockWasSuccessful());
        else
            Assert.True(simulator.LastBlockWasSuccessful());
        
        var txCost2 = simulator.Nexus.RootChain.GetTransactionFee(tx);
        return txCost2;
    }


    #endregion

}
